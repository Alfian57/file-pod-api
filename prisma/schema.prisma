// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  email               String       @unique
  password            String?
  name                String?
  profilePictureUrl   String?
  googleId            String?      @unique
  githubId            String?      @unique
  storageQuotaBytes   BigInt       @default(10737418240)
  storageUsedBytes    BigInt       @default(0)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  folders             Folder[]
  files               File[]
  sharedLinks         SharedLink[]
}

model Folder {
  id               String  @id @default(uuid())
  name             String
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  parentFolder     Folder? @relation("FolderHierarchy", fields: [parentFolderId], references: [id], onDelete: Cascade)
  parentFolderId   String?
  subFolders       Folder[] @relation("FolderHierarchy")
  files            File[]
  sharedLinks      SharedLink[]

  @@unique([userId, parentFolderId, name])
}

model File {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  folder      Folder?     @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String?
  name        String
  mimeType    String
  sizeBytes   BigInt
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sharedLinks SharedLink[]

  @@unique([userId, folderId, name])
}

model SharedLink {
  id           String    @id @default(uuid())
  linkToken    String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  
  file         File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId       String?
  folder       Folder?   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId     String?
  
  password String?
  createdAt    DateTime  @default(now())
}