name: Build, Push, and Deploy

on:
    workflow_dispatch
    # push:
    #     branches: ["main"]
    # pull_request:
    #     branches: ["main"]

env:
    IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
    build-push-and-deploy:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.IMAGE_NAME }}
                  tags: |
                      type=sha
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Deploy to Server via SSH
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USER }}
                  key: ${{ secrets.VPS_KEY }}
                  script: |
                      echo "ðŸš€ Starting deployment..."  
                      cd /root/deployment/other/file-pod-api

                      echo " pulling latest image..."
                      docker pull ${{ env.IMAGE_NAME }}:latest

                      echo " restarting container using docker-compose..."
                      docker-compose down
                      docker-compose up -d

                      echo " cleaning up old images..."
                      docker image prune -af

                      echo "âœ… Deployment finished successfully."
